---
- hosts: all
  name: KUBERNETES
  vars:
    k8s_version: 1.17.4
    etcd_version: 3.4.3
  tasks:
    - name: INSTALL PACKAGE REQUIREMENTS
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
        state: present

    # Do some hacks to get a etcd binary
    - name: CREATE ETCD CONTAINER
      docker_container:
        name: rpi-ansible-etcd
        image: "k8s.gcr.io/etcd-arm:{{ etcd_version }}"
        state: present
      delegate_to: localhost

    - name: COPY ETCDCTL BINARY FROM CONTAINER
      shell: "docker cp rpi-ansible-etcd:/usr/local/bin/etcdctl /tmp/etcdctl"
      delegate_to: localhost

    - name: COPY ETCDCTL INTO IMAGE
      copy:
        src: "/tmp/etcdctl"
        dest: "/usr/local/bin/etcdctl"
        owner: root
        group: root
        mode: "0751"

    - name: REMOVE ETCD CONTAINER
      docker_container:
        name: rpi-ansible-etcd
        state: absent
      delegate_to: localhost

    - name: ADD GCLOUD APT REPOSITORY KEY
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: ADD GCLOUD APT REPOSITORY
      apt_repository:
        repo: "deb [arch=armhf] https://packages.cloud.google.com/apt cloud-sdk main"
        state: present

    - name: INSTALL GCLOUD SDK
      apt:
        name:
          - google-cloud-sdk

    - name: ADD KUBERNETES APT REPOSITORY KEY
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: ADD KUBERNETES APT REPOSITORY
      apt_repository:
        repo: "deb [arch=armhf] https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: INSTALL KUBERNETES
      apt:
        name:
          - kubelet={{ k8s_version }}*
          - kubeadm={{ k8s_version }}*
          - kubectl={{ k8s_version }}*
          - cri-tools

    - name: HOLD KUBERNETES PACKAGES
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl

    - name: INSTALL REQUIRED PACKAGES
      apt:
        name:
          - vim
          - unzip
          - tar
          - btrfs-progs
          - libseccomp2
          - util-linux
          - socat
          - conntrack
          - jq
        state: present

    - name: INSTALL LEGACY TABLES
      apt:
        name:
          - iptables
          - arptables
          - ebtables
        state: present

    - name: UPDATE ALTERNATIVES TO LEGACY TABLES
      alternatives:
        name: "{{ item.name }}"
        path: "{{ item.path }}"
      with_items:
        - { name: "iptables", path: "/usr/sbin/iptables-legacy"}
        - { name: "ip6tables", path: "/usr/sbin/ip6tables-legacy"}
        - { name: "arptables", path: "/usr/sbin/arptables-legacy"}
        - { name: "ebtables", path: "/usr/sbin/ebtables-legacy"}

    - name: LOAD KERNEL MODULES
      copy:
        dest: /etc/modules-load.d/cri.conf
        content: |-
          ### This file is managed by Ansible
          ip_vs
          ip_vs_rr
          ip_vs_wrr
          ip_vs_sh
          nf_conntrack
          overlay
          br_netfilter

    - name: CONFIGURE SYSCTL BASE SETTINGS
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: no
      with_items:
        - {name: "net.bridge.bridge-nf-call-iptables", value: 1}
        - {name: "net.bridge.bridge-nf-call-ip6tables", value: 1}
        - {name: "net.ipv4.ip_forward", value: 1}

    # https://kubedex.com/90-days-of-aws-eks-in-production/
    # https://sven.stormbind.net/blog/posts/docker_from_30_to_230/
    - name: CONFIGURE SYSCTL OPTIMZATION SETTINGS
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        reload: no
      with_items:
        - {name: "fs.inotify.max_user_instances", value: 4096}
        - {name: "fs.inotify.max_user_watches", value: 32768}
        # - {name: "kernel.pid_max", value: 500000} - raspbian is 32bit so we only can use the default of 32768
        - {name: "net.ipv4.ip_local_port_range", value: "1024 64999"} # use even and odd numbers to prevent "ip_local_port_range: prefer different parity for start/end values"
        - {name: "net.ipv4.tcp_tw_reuse", value: 1}
        - {name: "net.ipv4.tcp_fin_timeout", value: 15}
        - {name: "net.core.somaxconn", value: 4096}
        - {name: "net.core.netdev_max_backlog", value: 4096}
        - {name: "net.core.rmem_max", value: 16777216}
        - {name: "net.core.wmem_max", value: 16777216}
        - {name: "net.ipv4.tcp_max_syn_backlog", value: 20480}
        - {name: "net.ipv4.tcp_max_tw_buckets", value: 400000}
        - {name: "net.ipv4.tcp_no_metrics_save", value: 1}
        - {name: "net.ipv4.tcp_rmem", value: "4096 87380 16777216"}
        - {name: "net.ipv4.tcp_syn_retries", value: 2}
        - {name: "net.ipv4.tcp_synack_retries", value: 2}
        - {name: "net.ipv4.tcp_wmem", value: "4096 65536 16777216"}
        - {name: "net.netfilter.nf_conntrack_max", value: 262144}
        - {name: "net.netfilter.nf_conntrack_generic_timeout", value: 120}
        - {name: "net.netfilter.nf_conntrack_tcp_timeout_established", value: 86400}
        - {name: "net.ipv4.neigh.default.gc_thresh1", value: 8096}
        - {name: "net.ipv4.neigh.default.gc_thresh2", value: 12288}
        - {name: "net.ipv4.neigh.default.gc_thresh3", value: 16384}

    - name: CREATE DIRECTORY FOR CNI CONFIGURATION FILES
      file:
        path: /etc/cni/net.d/
        state: directory

    - name: ADD DOCKER APT REPOSITORY KEY
      apt_key:
        url: https://download.docker.com/linux/raspbian/gpg
        state: present

    - name: ADD DOCKER APT REPOSITORY
      apt_repository:
        repo: "deb [arch=armhf] https://download.docker.com/linux/raspbian buster stable"
        state: present

    - name: INSTALL CONTAINERD
      apt:
        name:
          - containerd.io
        state: present

    - name: HOLD CONTAINERD PACKAGE
      dpkg_selections:
        name: containerd.io
        selection: hold

    - name: CONFIGURE CONTAINERD
      shell: "/usr/bin/containerd config default > /etc/containerd/config.toml"

    - name: SET SYSTEMD CGROUP DRIVER
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^    systemd_cgroup = false$'
        line: '    systemd_cgroup = true'

    - name: CONFIGURE CRICTL
      copy:
        dest: /etc/crictl.yaml
        content: |-
          ### This file is managed by Ansible
          runtime-endpoint: unix:///run/containerd/containerd.sock
          image-endpoint: unix:///run/containerd/containerd.sock
          timeout: 10

    - name: CONFIGURE KUBELET TO USE SYSTEMD CGROUP
      copy:
        dest: /etc/default/kubelet
        content: |-
          ### This file is managed by Ansible
          KUBELET_EXTRA_ARGS="--fail-swap-on=false --cpu-cfs-quota=false --cgroup-driver=systemd"

    - name: ENABLE CONTAINERD
      systemd:
        name: containerd
        enabled: yes

    - name: ENABLE KUBELET
      systemd:
        name: kubelet
        enabled: yes

    - name: SET KUBECONFIG ENVIRONMENT VARIABLE FOR ROOT
      lineinfile:
        path: /root/.bashrc
        line: 'export KUBECONFIG=/etc/kubernetes/admin.conf'

    - name: CREATE /USR/LOCAL/SHARE/KUBERNETES
      file:
        path: /usr/local/share/kubernetes
        owner: root
        group: root
        mode: "0755"
        state: directory

    - name: COPY KUBEADM SCRIPT
      copy:
        src: "./usr/local/share/kubernetes/kubeadm.sh"
        dest: "/usr/local/share/kubernetes/kubeadm.sh"
        owner: root
        group: root
        mode: "0700"

    - name: COPY FLANNEL YAML
      copy:
        src: "./usr/local/share/kubernetes/flannel.yaml"
        dest: "/usr/local/share/kubernetes/flannel.yaml"
        owner: root
        group: root
        mode: "0600"
